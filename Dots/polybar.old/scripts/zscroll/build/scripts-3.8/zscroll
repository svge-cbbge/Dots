#!/usr/bin/python3
"""A text scroller for panels or terminals"""
import argparse
import sys
from distutils.util import strtobool
from re import search
from shlex import split
from subprocess import CalledProcessError, check_output
from time import sleep, time
from unicodedata import east_asian_width


def str_to_bool(string):
    """Convert a string to a boolean.

    :param string: the string to convert
    :type string: str

    :raise ValueError: raised when the string cannot be converted

    :return: the boolean interpretation of the string
    :rtype: bool
    """
    return bool(strtobool(string.lower()))


# pylint: disable-msg=C0103
# pylint: disable-msg=W0603
parser = argparse.ArgumentParser()

# allow for a positional argument or piping into
parser.add_argument(
    'scroll_text',
    nargs='?',
    default=sys.stdin.read() if not sys.stdin.isatty() else None,
    help="""
         text to scroll; will print in place if not longer than -l scroll
         length; can be read from stdin, e.g. echo text | zscroll
         """,
)

parser.add_argument(
    '-l',
    '--length',
    type=int,
    default=40,
    help="length of scrolling text excluding padding (default: 40)",
)

parser.add_argument(
    '-r',
    '--reverse',
    type=str_to_bool,
    default=False,
    help="whether to scroll the text from left to right (default: false)",
)

parser.add_argument(
    '-b',
    '--before-text',
    default='',
    help="""
         stationary padding text to display to the left of the scroll-text
         (default: "")
         """,
)

parser.add_argument(
    '-a',
    '--after-text',
    default='',
    help="""
         stationary padding text to display to the right of the scroll-text
         (default: "")
         """,
)

parser.add_argument(
    '-p',
    '--scroll-padding',
    default=' - ',
    help="""
         padding text to display between the start and end of the scroll-text
         only when it is scrolling (default: " - ")
         """,
)

parser.add_argument(
    '-d',
    '--delay',
    type=float,
    default=0.4,
    help="""
         delay (in seconds) for scrolling update; lower this for faster
         scrolling (default: 0.4)
         """,
)

parser.add_argument(
    '-m',
    '--match-text',
    nargs=2,
    action='append',
    default=[],
    help="""
         takes 2 arguments: the regexp to search for in match-command output to
         determine whether to change settings and the new settings themselves;
         see the man page for more info (default: none)
         """,
)

parser.add_argument(
    '-M',
    '--match-command',
    action='append',
    default=[],
    help="command(s) to search output of (default: none)",
)

parser.add_argument(
    '-t',
    '--timeout',
    type=float,
    default=0,
    help="""
         time in seconds to wait before exiting; 0 means don't exit (default:
         0)
         """,
)

# no args
parser.add_argument(
    '-s',
    '--scroll',
    type=str_to_bool,
    default=True,
    help="whether to scroll; meant to be used with -m (default: true)",
)

parser.add_argument(
    '-u',
    '--update-check',
    type=str_to_bool,
    default=False,
    help="""
         specifies that the positional argument is a command that should be
         checked to determine if the scroll-text should be updated; when the
         output changes, the scroll-text is updated to the new output (default:
         false)
         """,
)

parser.add_argument(
    '-U',
    '--update-interval',
    type=float,
    default=0,
    help="""
         time in seconds to wait in between running update checking commands
         (i.e. the command specified by the positional argument when
         -u/--update-interval is specified and commands specified with
         -M/--match-command)  (default: 0)
         """,
)

parser.add_argument(
    '-n',
    '--newline',
    type=str_to_bool,
    default=True,
    help="""
         print a newline after each update; printing a newline may be
         necessary for panels (default: true)
         """,
)

initial_args = None
args = None
scroll_text = None
last_text_len = None
last_update_check_time = None


def visual_len(text):
    """Determine the "visual" length of text.

    Halfwidth characters are counted as length 1 and fullwidth characters are
    counted as length 2.

    :param text: the text to examine
    :type text: str

    :return: the visual length of the text
    :rtype: int
    """
    visual_length = 0
    for char in text:
        width = east_asian_width(char)
        if width == 'W' or width == 'F':
            visual_length += 2
        else:
            visual_length += 1
    return visual_length


def make_visual_len(desired_visual_length, text):
    """Coerce the text to the given "visual" length.

    The text will be altered by removing characters and padding with spaces as
    necessary to reach the exact desired length.

    :param desired_visual_length: the desired visual length
    :type desired_visual_length: int

    :param text: the text to modify
    :type text: str

    :return: the altered text
    :rtype: str
    """
    visual_length = 0
    altered_text = ''
    for char in text:
        if visual_length < desired_visual_length:
            width = east_asian_width(char)
            if width == 'W' or width == 'F':
                visual_length += 2
            else:
                visual_length += 1
            altered_text += char
        else:
            break
    if visual_length == desired_visual_length + 1:
        # remove final wide character and add a single space as padding
        altered_text = altered_text[:-1] + ' '
    elif visual_length < desired_visual_length:
        altered_text += ' ' * (desired_visual_length - visual_length)
    return altered_text


def shell_output(command):
    """Get the output of a shell command as a string.

    If the command fails, return "".  This is useful in certain cases where a
    command may not work initially but will work later so that zscroll does not
    need to be restarted (e.g. mpc command fails because mpd is not yet
    running).

    :param command: the command to run
    :type command: str

    :return: the command output
    :rtype: str
    """
    try:
        return (
            check_output(split(command)).decode(encoding='UTF-8').rstrip('\n')
        )
    except CalledProcessError:
        return ''


def update_check():
    """Update the scroll-text if the command output has changed.

    :return: whether the scroll-text has changed
    :rtype: bool
    """
    global scroll_text
    compare_text = shell_output(args.scroll_text)
    if scroll_text != compare_text:
        scroll_text = compare_text
        return True
    else:
        return False


def set_args(new_args):
    """Update args without altering the match text and command lists.

    :param new_args: the new arguments to set args to
    :type new_args: argparse.Namespace
    """
    global args
    args = new_args
    # -m and -M should never be altered
    args.match_command = initial_args.match_command
    args.match_text = initial_args.match_text


def match_update_args():
    """Check match-command(s) for match-text and update args if necessary.

    :return: whether the scroll-text was changed
    :rtype: bool
    """
    match_args = None
    search_text = shell_output(args.match_command[0])
    text_was_updated = False
    for i in range(len(args.match_text)):
        if len(args.match_command) > 1 and i > 0:
            search_text = shell_output(args.match_command[i])
        if search(args.match_text[i][0], search_text):
            match_args = parser.parse_args(split(args.match_text[i][1]))
            text_was_updated = (
                match_args.before_text != args.before_text
                or match_args.after_text != args.after_text
                or match_args.scroll_padding != args.scroll_padding
                or match_args.scroll_text != args.scroll_text
            )
    if match_args:
        set_args(match_args)
    return text_was_updated


def build_display_text(text, needs_scrolling, pad_with_space):
    """Shorten text if necessary and add static left and right padding to it.

    :param text: the text to add the left and right padding to
    :type text: str

    :param needs_scrolling: whether the text is long enough to be scrolled
    :type needs_scrolling: bool

    :param pad_with_space: whether to pad the beginning with a space (used when
        phasing in or out a fullwidth character)
    :type pad_with_space: bool

    :return: the altered text
    :rtype: str
    """
    if needs_scrolling:
        if pad_with_space:
            text = ' ' + text
        text = make_visual_len(args.length, text)
    return args.before_text + text + args.after_text


def print_text(text):
    """Print text in place or with newlines depending on the user's settings.

    :param text: the text to print
    :type text: str
    """
    # flush is necessary for lemonbar/panels (but not in terminal)
    global last_text_len
    text_len = visual_len(text)
    if args.newline:
        print(text, flush=True)
    else:
        if last_text_len and text_len < last_text_len:
            # need to overwrite previous characters with spaces
            text = make_visual_len(last_text_len, text)
        print(text, end='\r', flush=True)
    last_text_len = text_len


def maybe_update_text_and_settings():
    """Update the scroll-text and/or settings if necessary.

    :return: whether the text and/or settings were updated
    :rtype: bool
    """
    global last_update_check_time
    updated = False
    if (
        not args.update_interval
        or last_update_check_time is None
        or last_update_check_time + args.update_interval < time()
    ):
        if len(args.match_command) >= 1 and match_update_args():
            updated = True
        # want to always check, especially if new match (because -u setting
        # could have changed)
        if args.update_check and update_check():
            updated = True
        last_update_check_time = time()
    return updated


def zscroll(lines=0):
    """Update settings as needed and continuously prints scroll-text.

    :param lines: the number of lines to print (used for testing/debugging
        purposes)
    :type lines: int
    """
    # don't modify global var when shifting; keep for comparison
    shift_text = scroll_text
    should_restart_printing = True
    needs_scrolling = False
    last_hidden_was_wide = False
    next_hidden_is_wide = True
    end_time = time() + args.timeout
    num_lines = 0
    while True:
        if (args.timeout and time() > end_time) or (
            lines > 0 and num_lines == lines
        ):
            break
        else:
            num_lines += 1
        if maybe_update_text_and_settings():
            should_restart_printing = True
        if should_restart_printing:
            shift_text = scroll_text
            last_hidden_was_wide = False
            next_hidden_is_wide = False
            needs_scrolling = visual_len(scroll_text) > args.length
            if needs_scrolling:
                shift_text += args.scroll_padding
        display_text = build_display_text(
            shift_text,
            needs_scrolling,
            (last_hidden_was_wide or next_hidden_is_wide),
        )
        if args.scroll and needs_scrolling or should_restart_printing:
            print_text(display_text)
            should_restart_printing = False
        if args.scroll and needs_scrolling:
            if last_hidden_was_wide:
                # don't shift the text for one update
                last_hidden_was_wide = False
            elif next_hidden_is_wide:
                next_hidden_is_wide = False
                shift_text = shift_text[-1] + shift_text[0:-1]
            else:
                if args.reverse:
                    if visual_len(shift_text[-1]) == 2:
                        # phase in in two steps
                        next_hidden_is_wide = True
                    else:
                        shift_text = shift_text[-1] + shift_text[0:-1]
                else:
                    last_hidden_was_wide = visual_len(shift_text[0]) == 2
                    shift_text = shift_text[1:] + shift_text[0]
        sleep(args.delay)


def pre_parse_argv(argv):
    """Ensure that argv can be properly parsed by argparse.

    This is a workaround for the fact that argparse treats everything that
    starts with a hyphen as an option even after options that take a fixed
    number of arguments (https://bugs.python.org/issue9334).

    :param argv: the argument list as obtained from sys.argv
    :type argv: list

    :return: the pre-parsed argv list
    :rtype: list
    """
    for i in range(1, len(argv)):
        # note: don't need to check for --opt= because these work correctly
        if argv[i] in {
            '-b',
            '--before-text',
            '-a',
            '--after-text',
            '-p',
            '--scroll-padding',
            # unlikely to be an issue
            '-M',
            '--match-command',
        }:
            argv[i + 1] = ' ' + argv[i + 1]
        elif argv[i] in {'-m', '--match-text'}:
            argv[i + 1] = ' ' + argv[i + 1]
            argv[i + 2] = ' ' + argv[i + 2]
    return argv


def parse_argv(argv):
    """Parse command line arguments and update default values.

    Also remove leading spaces that wee added to arguments to prevent argparse
    from incorrectly parsing them.

    :param argv: the argument list as obtained from sys.argv
    :type argv: list
    """
    global initial_args, args, scroll_text
    args = parser.parse_args(argv[1:])
    args.before_text = args.before_text.replace(' ', '', 1)
    args.after_text = args.after_text.replace(' ', '', 1)
    if args.scroll_padding != ' - ':
        args.scroll_padding = args.scroll_padding.replace(' ', '', 1)
    args.match_text = [
        [j.replace(' ', '', 1) for j in i] for i in args.match_text
    ]
    args.match_command = [i.replace(' ', '', 1) for i in args.match_command]

    initial_args = args
    # if -u was specified, this will be correctly updated later
    scroll_text = args.scroll_text
    # update defaults to those specified by the users
    parser.set_defaults(**vars(args))


def validate_args(check_args):
    """Ensure that user-given arguments are valid.

    Exit with an error message if the arguments are not valid.

    :param check_args: the args to check
    :type check_args: argparse.Namespace
    """
    if not check_args.scroll_text:
        parser.print_help()
        sys.exit("Text to scroll must be specified.")
    if len(check_args.match_text) > 0 and len(check_args.match_command) == 0:
        parser.print_help()
        sys.exit("At least one -M is necessary for -m.")
    if len(check_args.match_command) > 1 and len(
        check_args.match_command
    ) != len(check_args.match_text):
        parser.print_help()
        sys.exit(
            "If there is more than one '-M', the number must match the"
            + " number of '-m's."
        )


def main():
    """Scroll text, handling invalid opts and keyboard interrupts."""
    argv = pre_parse_argv(sys.argv)
    parse_argv(argv)
    validate_args(args)
    for arg_string in args.match_text:
        arg_string = arg_string[1]
        match_args = parser.parse_args(split(arg_string))
        # -m and -M should never be altered
        # ignore them if the user tries to alter them even if they are wrong
        match_args.match_command = args.match_command
        match_args.match_text = args.match_text
        validate_args(match_args)
    try:
        zscroll()
    except KeyboardInterrupt:
        sys.exit(0)


if __name__ == '__main__':
    main()
